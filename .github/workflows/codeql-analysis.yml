name: "CodeQL - C# (.NET Framework 4.7.2) - build selected projects (CodeQL v3)"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 3 * * 0'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  codeql:
    name: CodeQL analysis (build selected .csproj)
    runs-on: windows-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: '1'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL (v3)
        uses: github/codeql-action/init@v3
        with:
          languages: csharp
          config-file: .github/codeql/codeql-config.yml

      - name: Download nuget.exe
        shell: powershell
        run: |
          $out = "nuget.exe"
          Invoke-WebRequest -Uri "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" -OutFile $out
          Write-Host "nuget.exe downloaded to $PWD\$out"

      - name: Locate MSBuild (vswhere fallback to PATH)
        id: find-msbuild
        shell: powershell
        run: |
          $msbuildPath = $null
          $pf86 = ${env:ProgramFiles(x86)}
          if (-not $pf86 -or -not (Test-Path $pf86)) {
            if ($env:ProgramFiles -and (Test-Path $env:ProgramFiles)) { $pf86 = $env:ProgramFiles }
            elseif ($env:ProgramW6432 -and (Test-Path $env:ProgramW6432)) { $pf86 = $env:ProgramW6432 }
          }
          if ($pf86) {
            $vswhere = Join-Path $pf86 "Microsoft Visual Studio\Installer\vswhere.exe"
          } else {
            $vswhere = $null
          }

          if ($vswhere -and (Test-Path $vswhere)) {
            $installPath = & $vswhere -latest -products * -requires Microsoft.Component.MSBuild -property installationPath -nologo 2>$null
            if ($installPath) {
              $candidate1 = Join-Path $installPath "MSBuild\Current\Bin\MSBuild.exe"
              $candidate2 = Join-Path $installPath "MSBuild\15.0\Bin\MSBuild.exe"
              if (Test-Path $candidate1) { $msbuildPath = $candidate1 }
              elseif (Test-Path $candidate2) { $msbuildPath = $candidate2 }
            }
          }

          if (-not $msbuildPath) { $msbuildPath = "msbuild" }

          Write-Host "Using MSBuild: $msbuildPath"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "msbuild=$msbuildPath"

      - name: Restore & Build selected projects (Models -> ApClient -> Batch)
        shell: powershell
        env:
          MSBUILD_PATH: ${{ steps.find-msbuild.outputs.msbuild }}
        run: |
          $projects = @(
            'NCB.CSI.Models/NCB.CSI.Models.csproj',
            'NCB.CSI.ApClient/NCB.CSI.ApClient.csproj',
            'NCB.CSI.Batch/NCB.CSI.Batch.csproj'
          )

          $msbuild = $env:MSBUILD_PATH
          if (-not $msbuild) { $msbuild = "msbuild" }

          foreach ($proj in $projects) {
            Write-Host "---- Processing project: $proj ----"

            if (-not (Test-Path $proj)) {
              Write-Error ('Project not found: ' + $proj + '. Update the path in the workflow if necessary.')
              exit 1
            }

            # Restore with nuget.exe (works for packages.config & older projects)
            Write-Host ('Restoring packages for ' + $proj)
            & .\nuget.exe restore $proj -PackagesDirectory packages
            if ($LASTEXITCODE -ne 0) {
              Write-Warning ('nuget restore returned exit code ' + $LASTEXITCODE + ' for ' + $proj + ' - continuing to build (msbuild may still resolve references).')
            }

            # Compute absolute OutDir using repo root as base (avoid trailing-backslash-quote escaping issues)
            $projDir = Split-Path -Parent $proj
            $repoRoot = (Get-Location).ProviderPath
            $outDirCandidate = Join-Path $projDir "bin\Release"
            $resolved = Join-Path $repoRoot $outDirCandidate

            # Ensure there is NO trailing backslash to avoid escaping the closing quote when we quote the argument
            $resolved = $resolved.TrimEnd('\')

            Write-Host ('Building ' + $proj + ' -> OutDir: ' + $resolved)

            # Pass Platform as AnyCPU (no space) to match common project Conditions (Release|AnyCPU).
            # Build the OutDir argument and quote it safely (we trimmed trailing backslash above).
            $platformArg = '/p:Platform=AnyCPU'
            $outArg = '/p:OutDir="' + $resolved + '"' 

            $msbuildArgs = @(
              $proj,
              '/p:Configuration=Release',
              $platformArg,
              $outArg,
              '/p:BuildProjectReferences=true',
              '/m'
            )

            Write-Host ('Calling MSBuild: ' + $msbuild + ' ' + ($msbuildArgs -join ' '))
            & $msbuild @msbuildArgs
            if ($LASTEXITCODE -ne 0) {
              Write-Error ('MSBuild failed for ' + $proj + ' with exit code ' + $LASTEXITCODE)
              exit $LASTEXITCODE
            }
          }

      - name: Perform CodeQL analysis (v3)
        uses: github/codeql-action/analyze@v3
        with:
          category: "security"